name: Run 

on:
    workflow_call:
      inputs:
        terraform_version:
          required: false
          default: "1.5.2"
          type: string
        environment_name:
          required: false
          default: "development"
          type: string              
        aws_account:
          required: false
          default: "1234567890"
          type: string
          description: "The number of the AWS account where the resources will be applied"
        aws_region:
          required: false
          default: "eu-west-2"
          type: string
      secrets:
        AWS_ACCESS_KEY_ID:
          required: false
        AWS_SECRET_ACCESS_KEY:
          required: false
        AZURE_SUBSCRIPTION_ID:
          required: false
        AZURE_TENANT_ID:
          required: false
        AZURE_CLIENT_ID:
          required: false

jobs:
  define_matrix:
    name: Define directory matrix
    runs-on: ubuntu-latest
    outputs:
      directories: ${{ steps.directories.outputs.json_directory_list }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate list of directories
        id: directories
        run: |
          directories=""

          core_services_subdirs=$(find ./core-services -maxdepth 1 -type d | sort -V)
          application_subdirs=$(find ./applications -maxdepth 1 -type d | sort -V)
          all_subdirs=$(printf "%s\n%s\n" "$core_services_subdirs" "$application_subdirs")
          for dir in $all_subdirs; do
            # Check if the subdirectory contains a main.tf file
            if [ -f "$dir/main.tf" ]; then
              directories+="$dir,"
            else
              echo "No Terraform configuration found in $dir, skipping..."
            fi
          done

          json_directory_list=$(echo -n "${directories%,}" | jq -Rs 'split(",") | map(select(. != ""))' | tr '\n' ' ')
          echo $json_directory_list
          echo "json_directory_list=$json_directory_list" >> "$GITHUB_OUTPUT"
    
  build:
    name: Build Infrastructure - ${{ matrix.directory }}
    runs-on: ubuntu-latest
    needs:
      - define_matrix
    strategy:
      matrix:
        directory: ${{ fromJSON(needs.define_matrix.outputs.directories) }}
      max-parallel: 1
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            ${{ matrix.directory }}
            environment
            globals.tf

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        if: ${{ env.AWS_SECRET_ACCESS_KEY != '' && env.AWS_ACCESS_KEY_ID != '' }}
        with:
          aws-region: ${{ inputs.aws_region }}
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          # role-duration-seconds: 1600

      - name: Configure Azure Credentials
        uses: azure/login@v2
        env:
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        if: ${{ env.AZURE_CLIENT_ID != '' && env.AZURE_TENANT_ID != '' && env.AZURE_SUBSCRIPTION_ID != '' }}
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }} 

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Copy required files from root directory
        env:
          DIRECTORY: ${{ matrix.directory }}
        run: |
          files_to_copy=("providers.tf" "terraform.tf")
          
          for FILE in "${files_to_copy[@]}"; do
            if [[ ! -f "$DIRECTORY"/"$FILE" ]]; then
                cp "$FILE" "$DIRECTORY"/
            else
              echo "NOTE - $(basename "$DIRECTORY") has its own "$FILE" file. Not copying "$FILE" from root"
            fi
          done
        
      - name: Determine Backend Type
        working-directory: ${{ matrix.directory }}
        id: backend
        run: |
          backend_type=$(grep -oP 'backend\s+"?\K[^"\s]+' ./backend.tf)
          echo "backend_type=$backend_type" >> $GITHUB_OUTPUT

      - name: Terraform Init with S3 Backend
        working-directory: ${{ matrix.directory }}
        if: ${{ steps.backend.outputs.backend_type == 's3' }}
        env:
          AWS_ACCOUNT_NUMBER: ${{ inputs.aws_account }}
          ENVIRONMENT_NAME: ${{ inputs.environment_name }}
          DIRECTORY: ${{ matrix.directory }}
        run: |
          state_name=$(basename "$DIRECTORY")
          terraform init \
            -backend-config=dynamodb_table="${AWS_REGION}"-state-locks \
            -backend-config=bucket="${AWS_ACCOUNT_NUMBER}"-"${AWS_REGION}"-state \
            -backend-config=key="${ENVIRONMENT_NAME}"/"$state_name"/terraform.tfstate

      - name: Terraform Init with Azure Backend
        working-directory: ${{ matrix.directory }}
        if: ${{ steps.backend.outputs.backend_type == 'azurerm' }}
        env:
          AWS_ACCOUNT_NUMBER: ${{ inputs.aws_account }}
          ENVIRONMENT_NAME: ${{ inputs.environment_name }}
          DIRECTORY: ${{ matrix.directory }}
        run: |
          # TODO: Update this to actually init with Azure backend
          state_name=$(basename "$DIRECTORY")
          terraform init \
            -backend-config=dynamodb_table="${AWS_REGION}"-state-locks \
            -backend-config=bucket="${AWS_ACCOUNT_NUMBER}"-"${AWS_REGION}"-state \
            -backend-config=key="${ENVIRONMENT_NAME}"/"$state_name"/terraform.tfstate

      - name: Find Terraform variables
        id: variables
        env:
          DIRECTORY: ${{ matrix.directory }}
          ENVIRONMENT_NAME: ${{ inputs.environment_name }}
        run: |
          find_app_var_files() {
            local dir=$1
            local state_name=$(basename "$dir")
            local tfvars="$dir/tfvars/${state_name}-${ENVIRONMENT_NAME}.tfvars"
            local json="$dir/tfvars/${state_name}-${ENVIRONMENT_NAME}.tfvars.json"
            if [[ -f "$tfvars" ]]; then
              echo "-var-file=$(readlink -f $tfvars)"
            elif [[ -f "$json" ]]; then
              echo "-var-file=$(readlink -f $json)"
            fi
          }

          find_env_var_files() {
            local tfvars="environment/${ENVIRONMENT_NAME}.tfvars"
            local tfvars="environment/${ENVIRONMENT_NAME}.tfvars.json"
            if [[ -f "$tfvars" ]]; then
              echo "-var-file=$(readlink -f $tfvars)"
            elif [[ -f "$json" ]]; then
              echo "-var-file=$(readlink -f $json)"
            fi
          }

          global_vars_file="-var-file=$(readlink -f globals.tfvars)"
          app_var_file=$(find_app_var_files "$DIRECTORY") 
          env_var_file=$(find_env_var_files)
          full_variable_flags="$global_vars_file $app_var_file $env_var_file"

          echo "tf_vars=$full_variable_flags" >> $GITHUB_OUTPUT
    
      - name: Terraform Plan
        working-directory: ${{ matrix.directory }}
        env: 
          ENVIRONMENT_NAME: ${{ inputs.environment_name }}
          TERRAFORM_VARIABLES: ${{ steps.variables.outputs.tf_vars }}
        run: terraform plan -no-color -input=false -out=tfplan -compact-warnings ${TERRAFORM_VARIABLES}

      - name: Terraform Destructive Actions Check
        working-directory: ${{ matrix.directory }}
        if: ${{ inputs.environment_name == 'prod' || inputs.environment_name == 'preprod' }}
        run: |
          delete_count=$(terraform show -json tfplan | jq -r '([.resource_changes[]?.change?.actions?] | flatten) + ([.output_changes[]?.actions?] | flatten) | (map(select(.=="delete")) | length)')
          if [[ "$delete_count" -gt "0" ]]; then
            echo "WARNING - Resources will be destroyed in $(basename `pwd`). Manual approval is required!"
          fi

      - name: Terraform Apply
        working-directory: ${{ matrix.directory }}
        env: 
          ENVIRONMENT_NAME: ${{ inputs.environment_name }}
          TERRAFORM_VARIABLES: ${{ steps.variables.outputs.tf_vars }}
        run: echo terraform apply -no-color -input=false tfplan

  