name: Build AWS Infrastructure

on: 
  push:
     branches:
      - main
  pull_request: null

jobs:
  config:
    name: Configure variables
    runs-on: ubuntu-latest
    outputs:
      environment_name: ${{ steps.set-environment.outputs.environment }}
      workspace_name: ${{ steps.set-environment.outputs.workspace_name }}
      aws_account_number: ${{ steps.set-account-number.outputs.account_number }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Determine Event Type and Set Environment Name
        id: set-environment
        run: |
          clean_branch_name() {
            local branch_name=$1
            branch_name=$(echo "$branch_name" | tr -cd '[:alnum:]:_-')
            branch_name=$(printf "%.6s" "$branch_name")
            echo "$branch_name"
          }

          if [[ "$GITHUB_EVENT_NAME" == "pull_request" ]]; then
            # Get the branch name from which the PR is being merged
            BASE_BRANCH=$(jq -r .pull_request.base.ref "$GITHUB_EVENT_PATH")
            HEAD_BRANCH=$(jq -r .pull_request.head.ref "$GITHUB_EVENT_PATH")
            PR_NUMBER=$(jq -r .pull_request.number "$GITHUB_EVENT_PATH")

            if [[ "$BASE_BRANCH" == "main" ]] && [[ "$HEAD_BRANCH" == "develop" ]]; then
              echo "environment=preproduction" >> $GITHUB_OUTPUT
            else
              CLEAN_HEAD_BRANCH=$(clean_branch_name "$HEAD_BRANCH")
              echo "environment=${PR_NUMBER}${CLEAN_HEAD_BRANCH}" >> $GITHUB_OUTPUT
            fi
          elif [[ "$GITHUB_EVENT_NAME" == "push" ]]; then
            BRANCH=$(echo "${GITHUB_REF#refs/heads/}")
            if [[ "$BRANCH" == "main" ]]; then
              echo "environment=production" >> $GITHUB_OUTPUT
            else
              exit 1
            fi
          fi

          if [[ "$environment" == "production" || "$environment" == "preproduction" ]]; then
            echo "workspace_name=$environment" >> $GITHUB_OUTPUT
          else
            echo "workspace_name=development" >> $GITHUB_OUTPUT
          fi


      - name: Get AWS account number
        id: set-account-number
        env:
          environment: ${{ steps.set-environment.outputs.environment }}
        run: |
          if [[ "$environment" == "production" || "$environment" == "preproduction" ]]; then
            account_number=$(jq -r .account_number environment/"$environment".tfvars.json)
          else
            account_number=$(jq -r .account_number environment/development.tfvars.json)
          fi
          echo "account_number=${account_number}" >> $GITHUB_OUTPUT

      - name: Print config summary
        env:
          environment: ${{ steps.set-environment.outputs.environment }}
          account_number: ${{ steps.set-account-number.outputs.account_number }}
        run: |
          echo "### Configuration " >> "$GITHUB_STEP_SUMMARY"
          echo "| Setting | Value |" >> "$GITHUB_STEP_SUMMARY"
          echo "| --- | --- |" >> "$GITHUB_STEP_SUMMARY"
          echo "| AWS Account | "$account_number" |" >> "$GITHUB_STEP_SUMMARY"
          echo "| Environment | "$environment" |" >> "$GITHUB_STEP_SUMMARY"

  build:
    name: Build AWS Infrastructure
    runs-on: ubuntu-latest
    needs:
      - config
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Run Terraform
        id: run_terraform
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}
          AWS_REGION: 'eu-west-1'
          AWS_ACCOUNT_NUMBER: ${{ needs.config.outputs.aws_account_number }}
          ENVIRONMENT_NAME: ${{ needs.config.outputs.environment_name }}
          WORKSPACE_NAME: ${{ needs.config.outputs.workspace_name }}
        run: |
          run_terraform() {
            local terraform_status=":heavy_check_mark:"
            local dir=$1
            local state_name=$(basename "$dir")
            cp versions.tf "$dir/"
            pushd "$dir" || exit
            echo "terraform workspace ${ENVIRONMENT_NAME}"
            app_var_file=$(find_app_var_files "$dir")
            env_var_file=$(find_env_var_files)
            terraform init \
              -backend-config=dynamodb_table="${AWS_REGION}"-state-locks \
              -backend-config=bucket="${AWS_ACCOUNT_NUMBER}"-"${AWS_REGION}"-state \
              -backend-config=key="${ENVIRONMENT_NAME}"/"$state_name"/terraform.tfstate
            terraform plan -no-color -input=false -out=tfplan -var-file="$global_vars_file" $app_var_file $env_var_file || terraform_status=":x:"
            terraform apply -no-color -input=false tfplan || terraform_status=":x:"
            echo "| ${state_name} | ${terraform_status} |" >> "$GITHUB_STEP_SUMMARY"
            if [[ $terraform_status == ":x:" ]]; then
              exit 1
            fi 
            popd || exit
          }

          find_app_var_files() {
            local dir=$1
            local dir_name=$(basename "$dir")
            local tfvars="$dir/tfvars/${dir_name}-${WORKSPACE_NAME}.tfvars"
            local json="$dir/tfvars/${dir_name}-${WORKSPACE_NAME}.tfvars.json"
            if [[ -f "$tfvars" ]]; then
              echo "-var-file=$tfvars"
            elif [[ -f "$json" ]]; then
              echo "-var-file=$json"
            fi
          }

          find_env_var_files() {
            local tfvars="../../environment/${WORKSPACE_NAME}.tfvars"
            local tfvars="../../environment/${WORKSPACE_NAME}.tfvars.json"
            if [[ -f "$tfvars" ]]; then
              echo "-var-file=$tfvars"
            elif [[ -f "$json" ]]; then
              echo "-var-file=$json"
            fi
          }

          echo "### Terraform Summary" >> "$GITHUB_STEP_SUMMARY"
          echo " " >> "$GITHUB_STEP_SUMMARY"
          echo "| Directory | Status |" >> "$GITHUB_STEP_SUMMARY"
          echo "| --- | --- |" >> "$GITHUB_STEP_SUMMARY"
          core_services_subdirs=$(find ./core-services -maxdepth 1 -type d | sort -V)
          application_subdirs=$(find ./applications -maxdepth 1 -type d | sort -V)
          all_subdirs=$(printf "%s\n%s\n" "$core_services_subdirs" "$application_subdirs")
          global_vars_file=$(readlink -f globals.tfvars)
          for dir in $all_subdirs ; do
              if [ -f "$dir/main.tf" ]; then
                run_terraform "$dir"
              else
                  echo "No Terraform configuration found in $dir, skipping..."
              fi
          done